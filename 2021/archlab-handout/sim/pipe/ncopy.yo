                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Kalven Schraut
                            | # 4949830
                            | # schra447
                            | # Describe how and why you modified the baseline code.
                            | # First I changed the first jump to an unconditional jump
                            | # to test and then the condition can be performed to 
                            | # test whether or not to jump to the loop. This was done
                            | # to take advanced of the assumption that jumps are always taken
                            | # unlike before the first jump was almost never taken causing a 
                            | # loss of cycles. The next major change was I did a loop unrolling
                            | # for 5 times and rearranged the load/store mrmovq and rmmovq to allow
                            | # for no cycles to be wasted by having to stall waiting for the mrmovq to be
                            | # finished. The loop unrolling helped reduce the amount of 
                            | # instructions needed to execute overall since instead of
                            | # adding 8 to the src/dest and -1 to the length after 
                            | # every iteration, 40 can be added to the src/dest and -5 to the length
                            | # after doing 5 iterations. This can be done since my check makes sure there
                            | # are at least 5 elements left in the src meaning that each one will
                            | # be  located 8 bytes after the one before so all of this can
                            | # be combined onto the mrmovq and rmovq instructions. finally after
                            | # there are less than  5 instructions left, I first check to see
                            | # if there is an element left in the src if so process the element, this
                            | # continues 4 more times or until no more elements are found since my
                            | # check makes sure there are less than 5 elements left. All this has
                            | # allowed me to achieve under 8.5 CPE while correctly copying and
                            | # outputting the correct count.
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            |   # Loop header
0x000: 6300                 |   xorq %rax,%rax    # count = 0;
0x002: 70f600000000000000   |   jmp Test    # go to Test:
0x00b:                      | Loop1:
0x00b: 50a70000000000000000 | 	mrmovq (%rdi), %r10  # read val1 from src
0x015: 50870800000000000000 | 	mrmovq 8(%rdi), %r8  # read val2 from src + 8
0x01f: 40a60000000000000000 |   rmmovq %r10, (%rsi)  # store val to dst
0x029: 62aa                 |   andq %r10, %r10    # val <= 0?
0x02b: 713e00000000000000   |   jle Loop2    # if so, goto Loop2:
0x034: c0f00100000000000000 |   iaddq $1, %rax   # count++
0x03e:                      | Loop2:
0x03e: 40860800000000000000 |   rmmovq %r8, 8(%rsi)  # store val2 to dest + 8
0x048: 6288                 |   andq %r8, %r8    # val <= 0?
0x04a: 715d00000000000000   |   jle Loop3    # if so, goto Loop3:
0x053: c0f00100000000000000 |   iaddq $1, %rax   # count++
0x05d:                      | Loop3:
0x05d: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10  # read val1 from src + 16
0x067: 50871800000000000000 | 	mrmovq 24(%rdi), %r8  # read val2 from src + 24
0x071: 40a61000000000000000 |   rmmovq %r10, 16(%rsi)  # store val1 to dest + 16
0x07b: 62aa                 |   andq %r10, %r10    # val <= 0?
0x07d: 719000000000000000   |   jle Loop4    # if so, goto Loop4:
0x086: c0f00100000000000000 |   iaddq $1, %rax   # count++
0x090:                      | Loop4:
0x090: 40861800000000000000 |   rmmovq %r8, 24(%rsi)  # store val3 to dest + 24
0x09a: 6288                 |   andq %r8, %r8    # val <= 0?
0x09c: 71af00000000000000   |   jle Loop5    # if so, goto Loop5:
0x0a5: c0f00100000000000000 |   iaddq $1, %rax   # count++
0x0af:                      | Loop5:
0x0af: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10  # read val1 from src + 32
0x0b9: c0f72800000000000000 |   iaddq $40, %rdi    # add 40 to src
0x0c3: 40a62000000000000000 |   rmmovq %r10, 32(%rsi)  # stpre val1 to dest + 32
0x0cd: c0f62800000000000000 |   iaddq $40, %rsi    # add 40 to dest
0x0d7: c0f2fbffffffffffffff |   iaddq $-5, %rdx    # substract 5 from len
0x0e1: 62aa                 |   andq %r10, %r10    # val <= 0?
0x0e3: 71f600000000000000   |   jle Test    # if so, goto Test:
0x0ec: c0f00100000000000000 |   iaddq $1, %rax   # count++
0x0f6:                      | Test:
0x0f6: 2029                 |   rrmovq %rdx, %r9    # move a seperate copy of len to temp register
0x0f8: c0f9fbffffffffffffff | 	iaddq $-5, %r9  # Sub 5 from temp length to see if the remaining length is at least 5
0x102: 750b00000000000000   |   jge Loop1      # if so, goto Loop:
0x10b:                      | jt1:
0x10b: c0f2ffffffffffffffff | 	iaddq $-1, %rdx # len--
0x115: 72fb01000000000000   | 	jl Done # if less than 0 then go to Done
0x11e: 50a70000000000000000 | 	mrmovq (%rdi), %r10  # read val1 from src
0x128: 50870800000000000000 | 	mrmovq 8(%rdi), %r8  # read val2 from src + 8
0x132: 40a60000000000000000 |   rmmovq %r10, (%rsi)  # store val1 to dest
0x13c: 62aa                 |   andq %r10, %r10    # val <= 0?
0x13e: 715101000000000000   |   jle jt2    # if so, goto jt2:
0x147: c0f00100000000000000 |   iaddq $1, %rax   # count++
0x151:                      | jt2:
0x151: c0f2ffffffffffffffff | 	iaddq $-1, %rdx # len--
0x15b: 72fb01000000000000   | 	jl Done # if less than 0 then go to Done
0x164: 40860800000000000000 |   rmmovq %r8, 8(%rsi)  # store val2 to dest + 8
0x16e: 6288                 |   andq %r8, %r8    # val <= 0?
0x170: 718301000000000000   |   jle jt3    # if so, goto jt3:
0x179: c0f00100000000000000 |   iaddq $1, %rax   # count++
0x183:                      | jt3:
0x183: c0f2ffffffffffffffff | 	iaddq $-1, %rdx # len--
0x18d: 72fb01000000000000   | 	jl Done # if less than 0 then go to Done
0x196: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10  # read val1 from src + 16
0x1a0: 50871800000000000000 | 	mrmovq 24(%rdi), %r8  # read val2 from src + 24
0x1aa: 40a61000000000000000 |   rmmovq %r10, 16(%rsi)  # store val1 to dest + 16
0x1b4: 62aa                 |   andq %r10, %r10    # val <= 0?
0x1b6: 71c901000000000000   |   jle jt4    # if so, goto jt4:
0x1bf: c0f00100000000000000 |   iaddq $1, %rax   # count++
0x1c9:                      | jt4:
0x1c9: c0f2ffffffffffffffff | 	iaddq $-1, %rdx # len--
0x1d3: 72fb01000000000000   | 	jl Done # if less than 0 then go to Done
0x1dc: 40861800000000000000 |   rmmovq %r8, 24(%rsi)  # store val2 to dest + 24
0x1e6: 6288                 |   andq %r8, %r8    # val <= 0?
0x1e8: 71fb01000000000000   |   jle Done    # if so, goto Done:
0x1f1: c0f00100000000000000 |   iaddq $1, %rax   # count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1fb:                      | Done:
0x1fb: 90                   |   ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1fc:                      | End:
                            | #/* $end ncopy-ys */
                            | 
