                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      |   .pos 0
0x000: 30f41003000000000000 | main:  irmovq Stack, %rsp    # Set up stack pointer
                            | 
                            |   # Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 |   irmovq $4, %rdx    # src and dst have 4 elements
0x014: 30f66802000000000000 |   irmovq dest, %rsi  # dst array
0x01e: 30f73002000000000000 |   irmovq src, %rdi  # src array
0x028: 803200000000000000   |   call ncopy     
0x031: 00                   |   halt      # should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Kalven Schraut
                            | # 4949830
                            | # schra447
                            | # Describe how and why you modified the baseline code.
                            | # First I changed the first jump to an unconditional jump
                            | # to test and then the condition can be performed to 
                            | # test whether or not to jump to the loop. This was done
                            | # to take advanced of the assumption that jumps are always taken
                            | # unlike before the first jump was almost never taken causing a 
                            | # loss of cycles. The next major change was I did a loop unrolling
                            | # for 5 times and rearranged the load/store mrmovq and rmmovq to allow
                            | # for no cycles to be wasted by having to stall waiting for the mrmovq to be
                            | # finished. The loop unrolling helped reduce the amount of 
                            | # instructions needed to execute overall since instead of
                            | # adding 8 to the src/dest and -1 to the length after 
                            | # every iteration, 40 can be added to the src/dest and -5 to the length
                            | # after doing 5 iterations. This can be done since my check makes sure there
                            | # are at least 5 elements left in the src meaning that each one will
                            | # be  located 8 bytes after the one before so all of this can
                            | # be combined onto the mrmovq and rmovq instructions. finally after
                            | # there are less than  5 instructions left, I first check to see
                            | # if there is an element left in the src if so process the element, this
                            | # continues 4 more times or until no more elements are found since my
                            | # check makes sure there are less than 5 elements left. All this has
                            | # allowed me to achieve under 8.5 CPE while correctly copying and
                            | # outputting the correct count.
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            |   # Loop header
0x032: 6300                 |   xorq %rax,%rax    # count = 0;
0x034: 702801000000000000   |   jmp Test    # go to Test:
0x03d:                      | Loop1:
0x03d: 50a70000000000000000 | 	mrmovq (%rdi), %r10  # read val1 from src
0x047: 50870800000000000000 | 	mrmovq 8(%rdi), %r8  # read val2 from src + 8
0x051: 40a60000000000000000 |   rmmovq %r10, (%rsi)  # store val to dst
0x05b: 62aa                 |   andq %r10, %r10    # val <= 0?
0x05d: 717000000000000000   |   jle Loop2    # if so, goto Loop2:
0x066: c0f00100000000000000 |   iaddq $1, %rax   # count++
0x070:                      | Loop2:
0x070: 40860800000000000000 |   rmmovq %r8, 8(%rsi)  # store val2 to dest + 8
0x07a: 6288                 |   andq %r8, %r8    # val <= 0?
0x07c: 718f00000000000000   |   jle Loop3    # if so, goto Loop3:
0x085: c0f00100000000000000 |   iaddq $1, %rax   # count++
0x08f:                      | Loop3:
0x08f: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10  # read val1 from src + 16
0x099: 50871800000000000000 | 	mrmovq 24(%rdi), %r8  # read val2 from src + 24
0x0a3: 40a61000000000000000 |   rmmovq %r10, 16(%rsi)  # store val1 to dest + 16
0x0ad: 62aa                 |   andq %r10, %r10    # val <= 0?
0x0af: 71c200000000000000   |   jle Loop4    # if so, goto Loop4:
0x0b8: c0f00100000000000000 |   iaddq $1, %rax   # count++
0x0c2:                      | Loop4:
0x0c2: 40861800000000000000 |   rmmovq %r8, 24(%rsi)  # store val3 to dest + 24
0x0cc: 6288                 |   andq %r8, %r8    # val <= 0?
0x0ce: 71e100000000000000   |   jle Loop5    # if so, goto Loop5:
0x0d7: c0f00100000000000000 |   iaddq $1, %rax   # count++
0x0e1:                      | Loop5:
0x0e1: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10  # read val1 from src + 32
0x0eb: c0f72800000000000000 |   iaddq $40, %rdi    # add 40 to src
0x0f5: 40a62000000000000000 |   rmmovq %r10, 32(%rsi)  # stpre val1 to dest + 32
0x0ff: c0f62800000000000000 |   iaddq $40, %rsi    # add 40 to dest
0x109: c0f2fbffffffffffffff |   iaddq $-5, %rdx    # substract 5 from len
0x113: 62aa                 |   andq %r10, %r10    # val <= 0?
0x115: 712801000000000000   |   jle Test    # if so, goto Test:
0x11e: c0f00100000000000000 |   iaddq $1, %rax   # count++
0x128:                      | Test:
0x128: 2029                 |   rrmovq %rdx, %r9    # move a seperate copy of len to temp register
0x12a: c0f9fbffffffffffffff | 	iaddq $-5, %r9  # Sub 5 from temp length to see if the remaining length is at least 5
0x134: 753d00000000000000   |   jge Loop1      # if so, goto Loop:
0x13d:                      | jt1:
0x13d: c0f2ffffffffffffffff | 	iaddq $-1, %rdx # len--
0x147: 722d02000000000000   | 	jl Done # if less than 0 then go to Done
0x150: 50a70000000000000000 | 	mrmovq (%rdi), %r10  # read val1 from src
0x15a: 50870800000000000000 | 	mrmovq 8(%rdi), %r8  # read val2 from src + 8
0x164: 40a60000000000000000 |   rmmovq %r10, (%rsi)  # store val1 to dest
0x16e: 62aa                 |   andq %r10, %r10    # val <= 0?
0x170: 718301000000000000   |   jle jt2    # if so, goto jt2:
0x179: c0f00100000000000000 |   iaddq $1, %rax   # count++
0x183:                      | jt2:
0x183: c0f2ffffffffffffffff | 	iaddq $-1, %rdx # len--
0x18d: 722d02000000000000   | 	jl Done # if less than 0 then go to Done
0x196: 40860800000000000000 |   rmmovq %r8, 8(%rsi)  # store val2 to dest + 8
0x1a0: 6288                 |   andq %r8, %r8    # val <= 0?
0x1a2: 71b501000000000000   |   jle jt3    # if so, goto jt3:
0x1ab: c0f00100000000000000 |   iaddq $1, %rax   # count++
0x1b5:                      | jt3:
0x1b5: c0f2ffffffffffffffff | 	iaddq $-1, %rdx # len--
0x1bf: 722d02000000000000   | 	jl Done # if less than 0 then go to Done
0x1c8: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10  # read val1 from src + 16
0x1d2: 50871800000000000000 | 	mrmovq 24(%rdi), %r8  # read val2 from src + 24
0x1dc: 40a61000000000000000 |   rmmovq %r10, 16(%rsi)  # store val1 to dest + 16
0x1e6: 62aa                 |   andq %r10, %r10    # val <= 0?
0x1e8: 71fb01000000000000   |   jle jt4    # if so, goto jt4:
0x1f1: c0f00100000000000000 |   iaddq $1, %rax   # count++
0x1fb:                      | jt4:
0x1fb: c0f2ffffffffffffffff | 	iaddq $-1, %rdx # len--
0x205: 722d02000000000000   | 	jl Done # if less than 0 then go to Done
0x20e: 40861800000000000000 |   rmmovq %r8, 24(%rsi)  # store val2 to dest + 24
0x218: 6288                 |   andq %r8, %r8    # val <= 0?
0x21a: 712d02000000000000   |   jle Done    # if so, goto Done:
0x223: c0f00100000000000000 |   iaddq $1, %rax   # count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x22d:                      | Done:
0x22d: 90                   |   ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x22e:                      | End:
                            | #/* $end ncopy-ys */
                            | 
0x22e:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x230:                      |   .align 8
0x230:                      | src:
0x230: 0100000000000000     | 	.quad 1
0x238: 0200000000000000     | 	.quad 2
0x240: fdffffffffffffff     | 	.quad -3
0x248: fcffffffffffffff     | 	.quad -4
0x250: fadebc0000000000     |   .quad 0xbcdefa # This shouldn't get moved
                            | 
0x260:                      |   .align 16
0x260:                      | Predest:
0x260: fadebc0000000000     |   .quad 0xbcdefa
0x268:                      | dest:
0x268: abefcd0000000000     | 	.quad 0xcdefab
0x270: abefcd0000000000     | 	.quad 0xcdefab
0x278: abefcd0000000000     | 	.quad 0xcdefab
0x280: abefcd0000000000     | 	.quad 0xcdefab
0x288:                      | Postdest:
0x288: bcfade0000000000     |   .quad 0xdefabc
                            | 
0x290:                      | .align 8
                            | # Run time stack
0x290: 0000000000000000     |   .quad 0
0x298: 0000000000000000     |   .quad 0
0x2a0: 0000000000000000     |   .quad 0
0x2a8: 0000000000000000     |   .quad 0
0x2b0: 0000000000000000     |   .quad 0
0x2b8: 0000000000000000     |   .quad 0
0x2c0: 0000000000000000     |   .quad 0
0x2c8: 0000000000000000     |   .quad 0
0x2d0: 0000000000000000     |   .quad 0
0x2d8: 0000000000000000     |   .quad 0
0x2e0: 0000000000000000     |   .quad 0
0x2e8: 0000000000000000     |   .quad 0
0x2f0: 0000000000000000     |   .quad 0
0x2f8: 0000000000000000     |   .quad 0
0x300: 0000000000000000     |   .quad 0
0x308: 0000000000000000     |   .quad 0
                            | 
0x310:                      | Stack:
